{"version":3,"sources":["Card.js","CardList.js","Scroll.js","SearchBox.js","App.js","Actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["card","name","email","id","className","alt","src","CardList","robots","cardArray","map","user","i","Card","key","Scroll","props","style","overflow","border","height","children","SearchBox","searchChange","type","placeholder","onChange","App","this","onRequestRobots","searchField","onsearhChange","isPending","filteredRobots","filter","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","intialstatesearch","intialstateRobots","isPendind","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.8402bacc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst card = ({name ,email ,id}) =>{\r\n\t\r\n\treturn(\r\n\t\t<div className ='bg-blue dib  pa3 ma2 grow bw2 shadow5'>\r\n\t\t<img  alt ='robot'src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\nexport default card;","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\nconst CardList =({robots}) =>{\r\n\tconst cardArray = robots.map((user,i)=>{\r\n\t\treturn <Card key ={robots[i].id} id={robots[i].id} name={robots[i].name} email ={robots[i].email}/>\r\n\t})\r\n\treturn(\r\n\t\t<div>\r\n\t\t{cardArray}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n export default CardList;\r\n","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n\treturn(\r\n\t\t<div style={{overflow:'scroll',border:'1px solid black',height:'900px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n\r\n};\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n\treturn(\r\n\t\t<div className ='p2 tc'>\r\n\t\t\t<input className ='p3 ba b--green bg-lightest-blue tc'type='search' placeholder='search' onChange={searchChange}/>\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\nexport default SearchBox;","import React,{Component} from 'react';\r\nimport {connect } from 'react-redux';\r\nimport CardList from './CardList';\r\nimport Scroll from './Scroll';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css';\r\n\r\nimport {setSearchField, requestRobots} from './Actions';\r\n\r\nconst mapStateToProps = state =>{\r\n\treturn{\r\n\t\tsearchField : state.searchRobots.searchField,\r\n\t\trobots:state.requestRobots.robots,\r\n\t\tisPending:state.requestRobots.isPending,\r\n\t\terror:state.requestRobots.error\r\n\r\n\t}\r\n}\r\n\r\nconst mapDispachProps = (dispatch) => {\r\n\treturn{\r\n\tonsearhChange: (event) => dispatch(setSearchField(event.target.value)), \r\n\tonRequestRobots: () => dispatch(requestRobots())\r\n} \r\n}\r\n\r\n\r\nclass App extends Component {\r\n\t\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\t\r\n\trender(){\r\n\t\t\r\n\t\tconst {searchField , onsearhChange ,robots,isPending} = this.props;\r\n\t\tconst filteredRobots =  robots.filter(robots=>{\r\n\t\t\treturn robots.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending ?\r\n\t\t\t<h1>loading</h1>:\r\n\t\t(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1>robots friends</h1>\r\n\t\t\t\t<SearchBox searchChange={onsearhChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t);\r\n\t\t}\r\n\t}\r\n\t\r\n\r\nexport default connect(mapStateToProps,mapDispachProps)(App);","import {CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED} from './constants.js'\r\n\r\nexport const setSearchField =(text)=>({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n\r\n})\r\n\r\nexport const requestRobots =() =>(dispatch)=>{\r\n\tdispatch({type:REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=> response.json())\r\n\t.then(data =>dispatch({ type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n\t.catch(error =>dispatch({type:REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FILED';\r\nexport const REQUEST_ROBOTS_PENDING ='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED} from './constants.js'\r\n\r\nconst intialstatesearch ={\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots  = (state=intialstatesearch, action={}) =>{\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t  return Object.assign({},state,{searchField:action.payload});\r\n\t\tdefault:\r\n\t\t  return state; \t\r\n\t}\r\n} \r\nconst intialstateRobots={\r\n\tisPendind:false,\r\n\trobots:[],\r\n\terror:''\r\n}\r\nexport const requestRobots=(state=intialstateRobots,action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t   return Object.assign({},state,{isPendind:true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t   return Object.assign({},state,{robots:action.payload,isPendind:false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t   return Object.assign({},state,{robots:action.payload,isPendind:false})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\t\r\n}  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore , applyMiddleware , combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducers.js';\nimport 'tachyons';\n\n\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst logger = createLogger();\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n      <App /> \n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}